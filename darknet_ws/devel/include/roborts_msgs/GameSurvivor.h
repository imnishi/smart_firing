// Generated by gencpp from file roborts_msgs/GameSurvivor.msg
// DO NOT EDIT!


#ifndef ROBORTS_MSGS_MESSAGE_GAMESURVIVOR_H
#define ROBORTS_MSGS_MESSAGE_GAMESURVIVOR_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace roborts_msgs
{
template <class ContainerAllocator>
struct GameSurvivor_
{
  typedef GameSurvivor_<ContainerAllocator> Type;

  GameSurvivor_()
    : red3(false)
    , red4(false)
    , blue3(false)
    , blue4(false)  {
    }
  GameSurvivor_(const ContainerAllocator& _alloc)
    : red3(false)
    , red4(false)
    , blue3(false)
    , blue4(false)  {
  (void)_alloc;
    }



   typedef uint8_t _red3_type;
  _red3_type red3;

   typedef uint8_t _red4_type;
  _red4_type red4;

   typedef uint8_t _blue3_type;
  _blue3_type blue3;

   typedef uint8_t _blue4_type;
  _blue4_type blue4;





  typedef boost::shared_ptr< ::roborts_msgs::GameSurvivor_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::roborts_msgs::GameSurvivor_<ContainerAllocator> const> ConstPtr;

}; // struct GameSurvivor_

typedef ::roborts_msgs::GameSurvivor_<std::allocator<void> > GameSurvivor;

typedef boost::shared_ptr< ::roborts_msgs::GameSurvivor > GameSurvivorPtr;
typedef boost::shared_ptr< ::roborts_msgs::GameSurvivor const> GameSurvivorConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::roborts_msgs::GameSurvivor_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::roborts_msgs::GameSurvivor_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::roborts_msgs::GameSurvivor_<ContainerAllocator1> & lhs, const ::roborts_msgs::GameSurvivor_<ContainerAllocator2> & rhs)
{
  return lhs.red3 == rhs.red3 &&
    lhs.red4 == rhs.red4 &&
    lhs.blue3 == rhs.blue3 &&
    lhs.blue4 == rhs.blue4;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::roborts_msgs::GameSurvivor_<ContainerAllocator1> & lhs, const ::roborts_msgs::GameSurvivor_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace roborts_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::roborts_msgs::GameSurvivor_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::roborts_msgs::GameSurvivor_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::roborts_msgs::GameSurvivor_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::roborts_msgs::GameSurvivor_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::roborts_msgs::GameSurvivor_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::roborts_msgs::GameSurvivor_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::roborts_msgs::GameSurvivor_<ContainerAllocator> >
{
  static const char* value()
  {
    return "48420e310835d7d79e0a1b719e881088";
  }

  static const char* value(const ::roborts_msgs::GameSurvivor_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x48420e310835d7d7ULL;
  static const uint64_t static_value2 = 0x9e0a1b719e881088ULL;
};

template<class ContainerAllocator>
struct DataType< ::roborts_msgs::GameSurvivor_<ContainerAllocator> >
{
  static const char* value()
  {
    return "roborts_msgs/GameSurvivor";
  }

  static const char* value(const ::roborts_msgs::GameSurvivor_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::roborts_msgs::GameSurvivor_<ContainerAllocator> >
{
  static const char* value()
  {
    return "#robot survival\n"
"bool red3\n"
"bool red4\n"
"bool blue3\n"
"bool blue4\n"
;
  }

  static const char* value(const ::roborts_msgs::GameSurvivor_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::roborts_msgs::GameSurvivor_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.red3);
      stream.next(m.red4);
      stream.next(m.blue3);
      stream.next(m.blue4);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct GameSurvivor_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::roborts_msgs::GameSurvivor_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::roborts_msgs::GameSurvivor_<ContainerAllocator>& v)
  {
    s << indent << "red3: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.red3);
    s << indent << "red4: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.red4);
    s << indent << "blue3: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.blue3);
    s << indent << "blue4: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.blue4);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ROBORTS_MSGS_MESSAGE_GAMESURVIVOR_H
